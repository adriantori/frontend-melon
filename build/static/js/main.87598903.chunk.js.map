{"version":3,"sources":["main/pages/Mains.js","shared/components/UIElements/Avatar.js","shared/components/UIElements/Card.js","plant/component/PlantItem.js","shared/components/FormElements/Button.js","plant/component/PlantList.js","shared/components/UIElements/Backdrop.js","shared/components/UIElements/Modal.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/LoadingSpinner.js","shared/hooks/http-hook.js","plant/pages/Plants.js","shared/context/auth-context.js","status/component/StatusItem.js","status/component/StatusList.js","status/pages/PlantStatus.js","shared/util/validators.js","shared/components/FormElements/Input.js","shared/components/FormElements/ImageUpload.js","shared/hooks/form-hook.js","plant/pages/NewPlant.js","plant/pages/UpdatePlant.js","plant/pages/UpdateStats.js","user/pages/Auth.js","shared/hooks/auth-hook.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","index.js"],"names":["Mains","className","Avatar","props","style","src","image","alt","width","height","Card","children","StatusItem","to","id","process","name","title","description","Button","href","size","inverse","danger","exact","type","onClick","disabled","PlantList","items","length","map","plant","key","Backdrop","ReactDOM","createPortal","document","getElementById","ModalOverlay","content","headerClass","header","onSubmit","event","preventDefault","contentClass","footerClass","footer","Modal","Fragment","show","onCancel","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","ErrorModal","onClear","error","LoadingSpinner","asOverlay","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","method","body","headers","httpAbortController","AbortController","current","push","fetch","signal","response","json","responseData","filter","requestController","ok","Error","message","useEffect","forEach","abort","clearError","Plants","loadedPlants","setLoadedPlants","plants","fetchPlant","AuthContext","createContext","isLoggedIn","userId","token","login","logout","auth","useContext","showStatus","setShowStatus","showConfirmModal","setShowConfirmModal","closeStatusHandler","cancelDeleteHandler","confirmDeleteHandler","Authorization","onDelete","ph","nitrogen","phospor","kalium","temperature","humidity","prediction","accuracy","creator","StatusList","status","onDeletePlant","err","console","log","i","PlantStatus","history","useHistory","plantId","useParams","fetchPlants","deletedPlantId","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","test","inputReducer","state","action","isTouched","Input","useReducer","initialValue","initialValid","inputState","dispatch","onInput","changeHandler","target","touchHandler","element","placeholder","onChange","onBlur","rows","htmlFor","label","errorText","ImageUpload","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","pickedFile","fileIsValid","files","center","click","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","inputData","formValidity","NewPlant","inputHandler","placeSubmitHandler","formData","FormData","append","UpdatePlant","loadedPlant","setFormData","placeUpdateSubmitHandler","JSON","stringify","UpdateStats","date","Date","getTime","logoutTimer","Auth","isLoginMode","setIsLoginMode","email","password","authSubmitHandler","undefined","prevMode","MainHeader","NavLinks","SideDrawer","MainNavigation","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","App","routes","setToken","tokenExpirationDate","setTokenExpiration","setUserId","uid","expirationDate","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","render"],"mappings":"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","file":"static/js/main.87598903.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Mains.css';\r\n\r\nconst Mains = () => {\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"message\">\r\n                    <h1>Selamat Datang di Aplikasi Check-up Tanaman Melon</h1>    \r\n                    <p>\r\n                        Aplikasi ini bertujuan untuk memudahkan pengecekan variabel tanaman.<br/>\r\n                        Beberapa variabel tersebut adalah pH / tingkat keasaman, Nitrogen, Fosfor, Kalium, Temperatur, dan tingkat kelembapan.<br/>\r\n                        Untuk mengakses aplikasi, mohon login terlebih dahulu.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Mains;","import React from 'react';\n\nimport './Avatar.css';\n\nconst Avatar = props => {\n  return (\n    <div className={`avatar ${props.className}`} style={props.style}>\n      <img\n        src={props.image}\n        alt={props.alt}\n        style={{ width: props.width, height: props.width }}\n      />\n    </div>\n  );\n};\n\nexport default Avatar;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Avatar from '../../shared/components/UIElements/Avatar';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport './PlantItem.css';\r\n\r\nconst StatusItem = props => {\r\n    return (\r\n        <li className=\"plant-item\">\r\n            <Card className='plant-item__content'>\r\n                <Link to={`/${props.id}/status`}> \r\n                    <div className='plant-item__image'>\r\n                        <Avatar image={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.name} />\r\n                    </div>\r\n                    <div className=\"plant-item__info\">\r\n                        <h2>{props.title}</h2>\r\n                        <h3>{props.description}</h3>\r\n                    </div>\r\n                </Link>\r\n            </Card>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default StatusItem;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\r\n\r\nimport PlantItem from './PlantItem';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport './PlantList.css';\r\n\r\nconst PlantList = props => {\r\n    if (props.items.length === 0){\r\n        return (\r\n            <div className = \"center\">\r\n                <Card>\r\n                <h2>Tanaman tidak ditemukan</h2>\r\n                <Button to=\"/addPlant\">Tambahkan tanaman baru</Button>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul className='plants-list'>\r\n            {props.items.map(plant => (\r\n                <PlantItem \r\n                key={plant.id} \r\n                id={plant.id} \r\n                image={plant.image} \r\n                title={plant.title} \r\n                description={plant.description}\r\n                />\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\nexport default PlantList;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Backdrop from './Backdrop';\r\nimport './Modal.css';\r\n\r\nconst ModalOverlay = props => {\r\n  const content = (\r\n    <div className={`modal ${props.className}`} style={props.style}>\r\n      <header className={`modal__header ${props.headerClass}`}>\r\n        <h2>{props.header}</h2>\r\n      </header>\r\n      <form\r\n        onSubmit={\r\n          props.onSubmit ? props.onSubmit : event => event.preventDefault()\r\n        }\r\n      >\r\n        <div className={`modal__content ${props.contentClass}`}>\r\n          {props.children}\r\n        </div>\r\n        <footer className={`modal__footer ${props.footerClass}`}>\r\n          {props.footer}\r\n        </footer>\r\n      </form>\r\n    </div>\r\n  );\r\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n};\r\n\r\nconst Modal = props => {\r\n  return (\r\n    <React.Fragment>\r\n      {props.show && <Backdrop onClick={props.onCancel} />}\r\n      <CSSTransition\r\n        in={props.show}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={200}\r\n        classNames=\"modal\"\r\n      >\r\n        <ModalOverlay {...props} />\r\n      </CSSTransition>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import { useState, useCallback, useRef, useEffect } from \"react\";\r\n\r\nexport const useHttpClient = () => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState();\r\n\r\n    const activeHttpRequests = useRef([]);\r\n\r\n    const sendRequest = useCallback (async (url, method = 'GET', body = null, headers = {}) => {\r\n        setIsLoading(true);\r\n        const httpAbortController = new AbortController();\r\n        activeHttpRequests.current.push(httpAbortController);\r\n        try{\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n                signal: httpAbortController.signal\r\n            });\r\n    \r\n            const responseData = await response.json();\r\n\r\n            activeHttpRequests.current = activeHttpRequests.current.filter(requestController => requestController !== httpAbortController);\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(responseData.message);\r\n            }\r\n            setIsLoading(false);\r\n            return responseData;\r\n        }catch(err){\r\n            setError(err.message);\r\n            setIsLoading(false);\r\n            throw err;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = () => {\r\n        setError(null);\r\n    };\r\n\r\n    useEffect(() => {\r\n        return() => {\r\n            activeHttpRequests.current.forEach(AbortController => AbortController.abort());\r\n        };\r\n    }, []); //never continue request if component gone\r\n\r\n    return { isLoading, error, sendRequest, clearError };\r\n};","import React, { useEffect, useState } from 'react';\r\n\r\nimport PlantList from '../component/PlantList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst Plants = () => {\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlants, setLoadedPlants] = useState();\r\n\r\n    useEffect(() => {\r\n        const fetchPlant = async () => {\r\n            try{\r\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + '/plants/');\r\n                \r\n                setLoadedPlants(responseData.plants);\r\n            }catch (err){}\r\n        }\r\n        fetchPlant();\r\n    }, [sendRequest]);\r\n\r\n    return <React.Fragment>\r\n        <ErrorModal error={error} onClear={clearError} />\r\n        {isLoading && (\r\n            <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )}\r\n        {!isLoading && loadedPlants && <PlantList items={loadedPlants}/>}\r\n        </React.Fragment>;\r\n}\r\n\r\nexport default Plants;","import { createContext } from \"react\";\r\n\r\nexport const AuthContext = createContext({\r\n    isLoggedIn: false, \r\n    userId: null,\r\n    token: null,\r\n    login: () => {}, \r\n    logout: () => {}\r\n});","import React, { useContext, useState } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport \"./StatusItem.css\"\r\n\r\nconst StatusItem = props => {\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const auth = useContext(AuthContext);\r\n    const[showStatus, setShowStatus] = useState(false);\r\n    const[showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n    const openStatusHandler = () => setShowStatus(true);\r\n    const closeStatusHandler = () => setShowStatus(false);\r\n\r\n    const showDeleteWarningHandler = () => {\r\n        setShowConfirmModal(true);\r\n    }\r\n\r\n    const cancelDeleteHandler = () => {\r\n        setShowConfirmModal(false);\r\n    }\r\n\r\n    const confirmDeleteHandler = async () => {\r\n        setShowConfirmModal(false);\r\n        //delete item\r\n        try{ \r\n            await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/plants/${props.id}`, \r\n                'DELETE',\r\n                null,\r\n                {\r\n                    Authorization: 'Bearer ' + auth.token\r\n                }    \r\n            );\r\n            props.onDelete(props.id);\r\n        }catch(err){}\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError}/>\r\n            <Modal \r\n            show={showStatus}\r\n            onCancel={closeStatusHandler}\r\n            header=\"Histori Tanaman\"\r\n            contentClass=\"status-item__modal-content\"\r\n            footerClass=\"status-item__modal-actions\"\r\n            footer={<Button onClick={closeStatusHandler}>Tutup</Button>}>\r\n                <div className=\"status-container\">\r\n                    <div className=\"status-item__info\">\r\n                    <h2>Informasi Tanaman Terakhir</h2>\r\n                    <h4>Nama Tanaman : {props.title}</h4>\r\n                    <h4>Deskripsi Tanaman : {props.description}</h4>\r\n                    <h4>pH : {props.ph}</h4>\r\n                    <h4>Nitrogen : {props.nitrogen}</h4>\r\n                    <h4>Fosfor : {props.phospor}</h4>\r\n                    <h4>Kalium : {props.kalium}</h4>\r\n                    <h4>Temperatur : {props.temperature}º Celcius</h4>\r\n                    <h4>Kelembapan : {props.humidity}%</h4>\r\n                    <h4>Prediksi : {props.prediction}</h4>\r\n                    <h4>Akurasi : {props.accuracy}</h4>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n            \r\n            <Modal \r\n            show={showConfirmModal}\r\n            onCancel={cancelDeleteHandler}\r\n            header=\"Apakah anda yakin?\" \r\n            footerClass=\"plant-item__modal-actions\" \r\n            footer={\r\n                <React.Fragment>\r\n                    <Button inverse onClick={cancelDeleteHandler}>Batal</Button>\r\n                    <Button danger onClick={confirmDeleteHandler}>Hapus</Button>\r\n                </React.Fragment>\r\n            }>\r\n                <p>Penghapusan bersifat permanen, apakah anda yakin?</p>\r\n            </Modal>\r\n\r\n        <li className=\"status-item\">\r\n            <Card className=\"status-item__content\">\r\n                {isLoading && <LoadingSpinner asOverlay/>}\r\n            <div className=\"status-item__image\">\r\n                <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title}/>\r\n            </div>\r\n            <div className=\"status-item__info\">\r\n                <h2>Informasi Tanaman Terakhir</h2>\r\n                <h4>Nama Tanaman : {props.title}</h4>\r\n                <h4>Deskripsi Tanaman : {props.description}</h4>\r\n                <h4>pH : {props.ph}</h4>\r\n                <h4>Nitrogen : {props.nitrogen}</h4>\r\n                <h4>Fosfor : {props.phospor}</h4>\r\n                <h4>Kalium : {props.kalium}</h4>\r\n                <h4>Temperatur : {props.temperature}º Celcius</h4>\r\n                <h4>Kelembapan : {props.humidity}%</h4>\r\n                <h4>Prediksi : {props.prediction}</h4>\r\n                <h4>Akurasi : {props.accuracy}</h4>\r\n            </div>\r\n            <div className=\"status-item__actions\">\r\n                <Button inverse onClick={openStatusHandler}>Histori</Button>\r\n                {auth.userId === props.creator && <Button to={`/plant/${props.id}`}>Edit</Button>}\r\n                {auth.userId === props.creator && <Button to={`/plant/${props.id}/stats`}>Update Status</Button>}\r\n                {auth.userId === props.creator && <Button danger onClick={showDeleteWarningHandler}>Hapus</Button>}\r\n            </div>\r\n            </Card>\r\n        </li>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default StatusItem;","import React from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport StatusItem from \"./StatusItem\";\r\nimport './StatusList.css';\r\n\r\nconst StatusList = props => {\r\n    if (props.items.length === 0){\r\n        return (\r\n        <div className=\"status-list center\">\r\n            <Card>\r\n                <h2>Info tanaman tidak ditemukan</h2>\r\n                <Button>Tambahkan informasi</Button>\r\n            </Card>\r\n        </div>\r\n        ); \r\n    }\r\n    try{\r\n        return (\r\n        <ul className=\"status-list\">\r\n            {props.items.map(status=> (\r\n                <StatusItem \r\n                key={status.id} \r\n                id={status.id} \r\n                image={status.image} \r\n                title={status.title} \r\n                description={status.description}\r\n                ph={status.ph}\r\n                nitrogen={status.nitrogen}\r\n                phospor={status.phospor}\r\n                kalium={status.kalium}\r\n                temperature={status.temperature}\r\n                humidity={status.humidity}\r\n                prediction={status.prediction}\r\n                accuracy={status.accuracy}\r\n                creator={status.creator}\r\n                onDelete={props.onDeletePlant}\r\n                />\r\n            ))}\r\n        </ul>\r\n        )\r\n    } catch (err){\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nexport default StatusList;","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport StatusList from '../component/StatusList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\n\r\nconst PlantStatus = () => {\r\n  const [loadedPlants, setLoadedPlants] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const history = useHistory();\r\n  const plantId = useParams().plantId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlants = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/plants/${plantId}`\r\n        );\r\n        setLoadedPlants(responseData.plant);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlants();\r\n  }, [sendRequest, plantId]);\r\n\r\n  const plantDeletedHandler = (deletedPlantId) => {\r\n    //setLoadedPlants(prevPlants => prevPlants.filter(plant => plant.id !== deletedPlantId));\r\n    history.push('/plants');\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlants && <StatusList items={[loadedPlants]} onDeletePlant={plantDeletedHandler} />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlantStatus;\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from \"react\";\r\n\r\nimport { validate } from \"../../util/validators\";\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'CHANGE': \r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            }\r\n        case 'TOUCH' : {\r\n            return{\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = props => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {value: props.initialValue || '', isTouched: false, isValid: props.initialValid || false});\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        dispatch({type: 'CHANGE', val: event.target.value, validators: props.validators});\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch ({\r\n            type: 'TOUCH'\r\n        });\r\n    };\r\n\r\n    const element = props.element === 'input' ? (\r\n    <input id={props.id} type={props.type} placeholder={props.placeholder} onChange={changeHandler} onBlur={touchHandler} value={inputState.value}/>) : (\r\n    <textarea id={props.id} rows={props.rows || 3} onChange={changeHandler} onBlur={touchHandler} value={inputState.value}/>);\r\n\r\n    return (\r\n        <div className={`form-control ${!inputState.isValid && inputState.isTouched &&'form-control--invalid'}`}>\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Input;","import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = event => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: 'none' }}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && 'center'}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Mohon pilih gambar</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PILIH GAMBAR\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'INPUT_CHANGE':\r\n        let formIsValid = true;\r\n        for (const inputId in state.inputs) {\r\n            if (!state.inputs[inputId]){\r\n                continue;\r\n            }\r\n            if (inputId === action.inputId) {\r\n                formIsValid = formIsValid && action.isValid;\r\n            } else {\r\n                formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n            }\r\n        }\r\n        return {\r\n          ...state,\r\n          inputs: {\r\n            ...state.inputs,\r\n            [action.inputId]: { value: action.value, isValid: action.isValid }\r\n          },\r\n          isValid: formIsValid\r\n        };\r\n        case 'SET_DATA':\r\n            return{\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n      });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n          type: 'INPUT_CHANGE',\r\n          value: value,\r\n          isValid: isValid,\r\n          inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};","import React, {useContext} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlantForm.css';\r\n\r\nconst NewPlant = () => {\r\n  const auth = useContext(AuthContext); //add current user\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n        title: {\r\n          value: '',\r\n          isValid: false\r\n        },\r\n        description: {\r\n          value: '',\r\n          isValid: false\r\n        },\r\n        image: {\r\n          value: null,\r\n          isValid: false\r\n        }\r\n        },\r\n        false\r\n    );\r\n\r\n    const history = useHistory();\r\n\r\n  const placeSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    try{\r\n      const formData = new FormData();\r\n      formData.append('title', formState.inputs.title.value);\r\n      formData.append('description', formState.inputs.description.value);\r\n      formData.append('image', formState.inputs.image.value);\r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + '/plants/', 'POST', formData, {\r\n        Authorization: 'Bearer ' + auth.token\r\n      });\r\n      console.log(formData);\r\n      //redirect\r\n      history.push('/');\r\n    }catch(err){}\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError}/>\r\n    <form className=\"plant-form\" onSubmit={placeSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay/>}\r\n      <Input\r\n        id=\"title\"\r\n        element=\"input\"\r\n        type=\"text\"\r\n        label=\"Nama Tanaman\"\r\n        validators={[VALIDATOR_REQUIRE()]}\r\n        errorText=\"Mohon masukkan nama tanaman yang valid\"\r\n        onInput={inputHandler}\r\n      />\r\n        {/* input template */}\r\n      <Input\r\n        id=\"description\"\r\n        element=\"textarea\"\r\n        label=\"Deskripsi\"\r\n        validators={[VALIDATOR_MINLENGTH(5)]}\r\n        errorText=\"Mohon masukkan deskripsi yang valid (minimal 5 karakter)\"\r\n        onInput={inputHandler}\r\n      />\r\n      <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Mohon pilih gambar tanaman\"/>\r\n      <Button type=\"submit\" disabled={!formState.isValid}>\r\n        Tambahkan Tanaman\r\n      </Button>\r\n    </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlant;\r\n","import React, { useContext, useEffect, useState }from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlantForm.css';\r\n\r\n\r\nconst UpdatePlant = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest,clearError } = useHttpClient();\r\n    const [loadedPlant, setLoadedPlants] = useState();\r\n    const plantId = useParams().plantId;\r\n    const history = useHistory();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        title: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        description: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n    }, false);\r\n\r\n    useEffect(() => {\r\n        const fetchPlant = async () => {\r\n            try{\r\n                const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/plants/${plantId}`);\r\n                setLoadedPlants(responseData.plant);\r\n                setFormData(\r\n                    {\r\n                        title: {\r\n                            value: responseData.plant.title,\r\n                            isValid: true\r\n                        },\r\n                        description: {\r\n                            value: responseData.plant.description,\r\n                            isValid: true\r\n                        }\r\n                    },\r\n                    true\r\n                    );\r\n            }catch(err){}\r\n        }\r\n        fetchPlant();\r\n    }, [sendRequest, plantId, setFormData]);\r\n   \r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        //update backend\r\n        try{\r\n            await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/plants/${plantId}`, 'PATCH', JSON.stringify({\r\n                title: formState.inputs.title.value,\r\n                description: formState.inputs.description.value\r\n            }), {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + auth.token\r\n            });\r\n            history.push('/' + plantId + '/status');\r\n            console.log('updated');\r\n        }catch(err){}\r\n    };\r\n\r\n    if (isLoading){\r\n        return (\r\n        <div className=\"center\">\r\n            <LoadingSpinner />\r\n        </div>\r\n        );\r\n    };\r\n\r\n    if (!loadedPlant && !error){\r\n        return (\r\n        <div className=\"center\">\r\n            <h2>Tidak dapat menemukan tanaman</h2>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError}/>\r\n            {!isLoading && loadedPlant && <form className=\"plant-form\" onSubmit={placeUpdateSubmitHandler}>\r\n                <Input \r\n                id=\"title\" \r\n                element=\"input\" \r\n                type=\"text\" \r\n                label=\"Nama Tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Mohon masukkan nama tanaman\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.title}\r\n                initialValid={true}\r\n                />\r\n                <Input \r\n                id=\"description\" \r\n                element=\"textarea\" \r\n                label=\"Deskripsi\" \r\n                validators={[VALIDATOR_MINLENGTH(5)]}\r\n                errorText=\"Mohon masukkan deskripsi yang valid (minimal 5 karakter)\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.description}\r\n                initialValid={true}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>Update Plant</Button>\r\n            </form>}\r\n        </React.Fragment>\r\n    \r\n    )\r\n};\r\n\r\nexport default UpdatePlant;","import React, { useContext, useEffect, useState }from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH} from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlantForm.css';\r\n\r\n\r\nconst UpdateStats = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest,clearError } = useHttpClient();\r\n    const [loadedPlant, setLoadedPlants] = useState();\r\n    const plantId = useParams().plantId;\r\n    const history = useHistory();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        title: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        description: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        ph: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        nitrogen: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        phospor: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        kalium: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        temperature: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        humidity: {\r\n            value: '',\r\n            isValid: false\r\n        }\r\n    }, false);\r\n\r\n    useEffect(() => {\r\n        const fetchPlant = async () => {\r\n            try{\r\n                const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/plants/${plantId}`);\r\n                setLoadedPlants(responseData.plant);\r\n                setFormData(\r\n                    {\r\n                        title: {\r\n                            value: responseData.plant.title,\r\n                            isValid: true\r\n                        },\r\n                        description: {\r\n                            value: responseData.plant.description,\r\n                            isValid: true\r\n                        }\r\n                    },\r\n                    true\r\n                    );\r\n            }catch(err){}\r\n        }\r\n        fetchPlant();\r\n    }, [sendRequest, plantId, setFormData]);\r\n   \r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        //update backend\r\n        try{\r\n            await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/plants/${plantId}/stats`, 'PATCH', JSON.stringify({\r\n                title: formState.inputs.title.value,\r\n                description: formState.inputs.description.value,\r\n                ph: formState.inputs.ph.value,\r\n                nitrogen: formState.inputs.nitrogen.value,\r\n                phospor: formState.inputs.phospor.value,\r\n                kalium: formState.inputs.kalium.value,\r\n                temperature: formState.inputs.temperature.value,\r\n                humidity: formState.inputs.humidity.value\r\n            }), {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + auth.token\r\n            });\r\n            console.log('updated');\r\n        }catch(err){}\r\n        //insert history\r\n        try{\r\n            await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/plants/${plantId}/stats`, 'POST', JSON.stringify({\r\n                id: plantId,\r\n                title: formState.inputs.title.value,\r\n                description: formState.inputs.description.value,\r\n                ph: formState.inputs.ph.value,\r\n                nitrogen: formState.inputs.nitrogen.value,\r\n                phospor: formState.inputs.phospor.value,\r\n                kalium: formState.inputs.kalium.value,\r\n                temperature: formState.inputs.temperature.value,\r\n                humidity: formState.inputs.humidity.value,\r\n                date: new Date( new Date().getTime())\r\n            }), {\r\n                'Content-Type': 'application/json',\r\n                Authorization: 'Bearer ' + auth.token\r\n            });\r\n            history.push('/' + plantId + '/status');\r\n            console.log('history created');\r\n        }catch(err){}\r\n    };\r\n\r\n    if (isLoading){\r\n        return (\r\n        <div className=\"center\">\r\n            <LoadingSpinner />\r\n        </div>\r\n        );\r\n    };\r\n\r\n    if (!loadedPlant && !error){\r\n        return (\r\n        <div className=\"center\">\r\n            <h2>Tidak dapat menemukan tanaman</h2>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError}/>\r\n            {!isLoading && loadedPlant && <form className=\"plant-form\" onSubmit={placeUpdateSubmitHandler}>\r\n                <Input \r\n                id=\"title\" \r\n                element=\"input\" \r\n                type=\"text\" \r\n                label=\"Nama Tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nama yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.title}\r\n                initialValid={true}\r\n                />\r\n                <Input \r\n                id=\"description\" \r\n                element=\"textarea\" \r\n                label=\"Deskripsi Tanaman\" \r\n                validators={[VALIDATOR_MINLENGTH(5)]}\r\n                errorText=\"Masukkan deskripsi yang valid (minimal 5 karakter)\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.description}\r\n                initialValid={true}\r\n                />\r\n                <Input \r\n                id=\"ph\" \r\n                element=\"text\" \r\n                label=\"pH tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nilai pH yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.ph}\r\n                />\r\n                <Input \r\n                id=\"nitrogen\" \r\n                element=\"text\" \r\n                label=\"Nitrogen tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nilai Nitrogen yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.nitrogen}\r\n                />\r\n                <Input \r\n                id=\"phospor\" \r\n                element=\"text\" \r\n                label=\"Fosfor tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nilai Fosfor yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.phospor}\r\n                />\r\n                <Input \r\n                id=\"kalium\" \r\n                element=\"text\" \r\n                label=\"Kalium tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nilai Kalium yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.kalium}\r\n                />\r\n                <Input \r\n                id=\"temperature\" \r\n                element=\"text\" \r\n                label=\"Temperatur tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nilai Temperatur yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.temperature}\r\n                />\r\n                <Input \r\n                id=\"humidity\" \r\n                element=\"text\" \r\n                label=\"Kelembapan tanaman\" \r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Masukkan nilai Kelembapan yang valid\" \r\n                onInput={inputHandler}\r\n                initialValue={loadedPlant.humidity}\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>Update Tanaman</Button>\r\n            </form>}\r\n        </React.Fragment>\r\n    \r\n    )\r\n};\r\n\r\nexport default UpdateStats;","import React, { useState, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport './Auth.css';\r\n\r\nconst Auth = () => {\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        email:{\r\n            value:'',\r\n            isValid: false\r\n        },\r\n        password:{\r\n            value:'',\r\n            isValid: false\r\n        }\r\n    }, false);\r\n\r\n    const signUpModeHandler = () => {\r\n        if(!isLoginMode){\r\n            setFormData({\r\n                ...formState.inputs,\r\n                name: undefined,\r\n                image: undefined\r\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid)\r\n        } else {\r\n            setFormData({\r\n                ...formState.inputs,\r\n                name: {\r\n                    value: '',\r\n                    isValid: false\r\n                },\r\n                image: {\r\n                    value: null,\r\n                    isValid: false\r\n                }\r\n            }, false);\r\n        }\r\n        setIsLoginMode(prevMode => !prevMode);\r\n    }\r\n\r\n    const authSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        \r\n        if (isLoginMode){\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    process.env.REACT_APP_BACKEND_URL + '/users/login', \r\n                    'POST', \r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                         password: formState.inputs.password.value\r\n                    }), \r\n                    {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                );\r\n                auth.login(responseData.userId, responseData.token);\r\n            } catch (err){}\r\n        } else {\r\n            try{\r\n                const formData = new FormData();\r\n                formData.append('email', formState.inputs.email.value);\r\n                formData.append('name', formState.inputs.name.value);\r\n                formData.append('password', formState.inputs.password.value);\r\n                formData.append('image', formState.inputs.image.value);\r\n                await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users/signup',\r\n                'POST', \r\n                formData\r\n                );\r\n                history.push('/');\r\n                //auth.login(responseData.userId, responseData.token);\r\n            } catch(err) {}\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <ErrorModal error={error} onClear={clearError}/>\r\n        <Card className=\"authentication\">\r\n            {isLoading && <LoadingSpinner asOverlay/>}\r\n        <h2>{isLoginMode ? 'Harap Login Terlebih Dahulu' : 'Daftar Sebagai Akun Baru'}</h2>\r\n        <hr/>\r\n        <form onSubmit={authSubmitHandler}>\r\n        {!isLoginMode && (\r\n            <Input \r\n            element=\"input\" \r\n            id=\"name\" \r\n            type=\"text\" \r\n            label=\"Nama Pengguna\" \r\n            validators={[VALIDATOR_REQUIRE]}\r\n            errorText=\"Mohon masukkan nama\"\r\n            onInput={inputHandler}\r\n            />)}\r\n        {!isLoginMode && <ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Mohon pilih gambar\" />}\r\n        <Input \r\n        element=\"input\" \r\n        id=\"email\" \r\n        type=\"email\" \r\n        label=\"Email\" \r\n        validators={[VALIDATOR_EMAIL]} \r\n        errorText=\"Mohon masukkan email yang valid\"\r\n        onInput={inputHandler}/>\r\n        <Input \r\n        element=\"input\" \r\n        id=\"password\" \r\n        type=\"password\" \r\n        label=\"Password\" \r\n        validators={[VALIDATOR_MINLENGTH(6)]} \r\n        errorText=\"Mohon masukkan password yang valid (minimal 6 karakter)\"\r\n        onInput={inputHandler}/>\r\n        <Button type=\"submit\" disabled={!formState.isValid}>{isLoginMode ? 'Login' : 'Daftar'}</Button>\r\n    </form>\r\n    <Button inverse onClick={signUpModeHandler}>{isLoginMode ? 'Daftar' : 'Login'}</Button>\r\n    </Card>\r\n    </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Auth;","import { useState, useCallback, useEffect } from 'react';\r\n\r\nlet logoutTimer\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState(false);\r\n    const [tokenExpirationDate, setTokenExpiration] = useState();\r\n    const [userId, setUserId] = useState(false);\r\n  \r\n    const login = useCallback((uid, token, expirationDate) => {\r\n      setToken(token);\r\n      setUserId(uid);\r\n      const tokenExpirationDate = expirationDate || new Date( new Date().getTime() + 1000 * 60 * 60); //generate date 1 hour (same as token exp)\r\n      setTokenExpiration(tokenExpirationDate);\r\n      localStorage.setItem(\r\n        'userData', \r\n        JSON.stringify({\r\n          userId: uid, \r\n          token: token,\r\n          expiration : tokenExpirationDate.toISOString() //store exact date as string, can be returned as date data\r\n        })); //save token in local storage\r\n    }, []);\r\n  \r\n    const logout = useCallback(() => {\r\n      setToken(null);\r\n      setTokenExpiration(null);\r\n      setUserId(null);\r\n      localStorage.removeItem('userData');\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if(token && tokenExpirationDate){\r\n        const remainingTime = tokenExpirationDate - new Date().getTime();\r\n        logoutTimer = setTimeout(logout, remainingTime);\r\n      }else{\r\n        clearTimeout(logoutTimer);\r\n      }\r\n    }, [token, logout, tokenExpirationDate]);\r\n  \r\n    useEffect(() => { //keep user logged in\r\n      const storedData = JSON.parse(localStorage.getItem('userData')); //get current user data\r\n      if (storedData && storedData.token && new Date(storedData.expiration) > new Date()){\r\n        login(storedData.userId, storedData.token, new Date(storedData.expiration));\r\n      }\r\n    }, [login]);\r\n\r\n    return { token, login, logout, userId };\r\n}","import React from 'react';\r\n\r\nimport './MainHeader.css';\r\n\r\nconst MainHeader = props => {\r\n    return <header className=\"main-header\">\r\n        {props.children}\r\n    </header>\r\n};\r\n\r\nexport default MainHeader;","import React, { useContext }from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport './NavLinks.css';\r\n\r\nconst NavLinks = props => {\r\n    const auth = useContext(AuthContext);\r\n\r\n    return <ul className=\"nav-links\">\r\n        <li>\r\n            <NavLink to=\"/\" exact>Menu Utama</NavLink>\r\n        </li>\r\n        {auth.isLoggedIn && (\r\n            <li>\r\n                <NavLink to=\"/plants\">Info Tanaman</NavLink>\r\n            </li>\r\n        )}\r\n        {auth.isLoggedIn && (\r\n            <li>\r\n                <NavLink to=\"/addPlant\">Tambah Tanaman</NavLink>\r\n            </li>\r\n        )}\r\n        {!auth.isLoggedIn && (\r\n            <li>\r\n                <NavLink to=\"/auth\">Login/Register</NavLink>\r\n            </li>\r\n        )}\r\n        {auth.isLoggedIn && (\r\n            <li>\r\n                <button onClick={auth.logout}>Log-out</button>\r\n            </li>\r\n        )}\r\n    </ul>\r\n};\r\n\r\nexport default NavLinks;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport './SideDrawer.css';\r\n\r\nconst SideDrawer = props => {\r\n    const content = <CSSTransition in={props.show} timeout={200} classNames=\"slide-in-left\" mountOnEnter unmountOnExit>\r\n        <aside className='side-drawer' onClick={props.onClick}>{props.children}</aside>\r\n    </CSSTransition>\r\n\r\n    return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\r\n};\r\n\r\nexport default SideDrawer;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport MainHeader from './MainHeader';\r\nimport NavLinks from './NavLinks';\r\nimport SideDrawer from './SideDrawer';\r\nimport Backdrop from '../UIElements/Backdrop';\r\nimport './MainNavigation.css';\r\n\r\nconst MainNavigation = props => {\r\n    const [drawerIsOpen, setDrawerIsOpen] = useState(false);\r\n\r\n    const openDrawerHandler = () => {\r\n        setDrawerIsOpen(true);\r\n    };\r\n\r\n    const closeDrawerHandler = () => {\r\n        setDrawerIsOpen(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        {drawerIsOpen && <Backdrop onClick={closeDrawerHandler}/>}\r\n\r\n        <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\r\n            <nav className='main-navigation__drawer-nav'>\r\n                <NavLinks />\r\n            </nav>\r\n        </SideDrawer>\r\n\r\n        <MainHeader>\r\n            <button className=\"main-navigation__menu-btn\" onClick={openDrawerHandler}>\r\n                <span/>\r\n                <span/>\r\n                <span/>\r\n            </button>\r\n            <h1 className=\"main-navigation__title\">\r\n                <Link to=\"/\">Check-up Melon</Link>\r\n            </h1>\r\n            <nav className='main-navigation__header-nav'>\r\n                <NavLinks />\r\n            </nav>\r\n        </MainHeader>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default MainNavigation;","import React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch} from 'react-router-dom';\n\nimport Mains from './main/pages/Mains';\nimport Plants from './plant/pages/Plants';\nimport PlantStatus from './status/pages/PlantStatus';\nimport NewPlant from './plant/pages/NewPlant';\nimport UpdatePlant from './plant/pages/UpdatePlant';\nimport UpdateStats from './plant/pages/UpdateStats';\nimport Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\n\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n\n  if(token){\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n            <Mains />\n          </Route>\n          <Route path=\"/:plantId/status\">\n            <PlantStatus />\n          </Route>\n          <Route path=\"/addPlant\" exact>\n            <NewPlant />\n          </Route>\n          <Route path=\"/plants\" exact>\n            <Plants />\n          </Route>\n          <Route path=\"/plant/:plantId/stats\">\n            <UpdateStats />\n          </Route>\n          <Route path=\"/plant/:plantId/\">\n            <UpdatePlant />\n          </Route>\n          <Route path=\"/addPlant\" exact>\n            <NewPlant />\n          </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Mains />\n        </Route>\n        <Route path=\"/auth\" exact>\n          <Auth/>\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n\n    );\n  }\n\n  return (\n    <AuthContext.Provider value={{ \n        isLoggedIn: !!token, \n        token: token, \n        userId: userId, \n        login: login, \n        logout: logout \n      }}>\n      <Router>\n        <MainNavigation />\n        <main>\n          {routes}\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}